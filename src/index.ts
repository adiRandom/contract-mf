import {app, BrowserWindow, dialog, ipcMain, Menu} from 'electron';
import {generateContract} from "./lib/docService";
import {Contract} from "./model/contract";
import * as fs from "fs";
import * as path from "path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


let mainWindow: BrowserWindow | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}


const mainMenu = Menu.buildFromTemplate([
    {
        label: 'File',
        submenu: [
            {
                label: 'Case de marcat',
                click() {
                    openListWindow();
                }
            },
            {type: 'separator'},
            {
                label: 'Iesire',
                click() {
                    app.quit();
                }
            }
        ]
    }
    // Add other menu items as needed
]);

const createWindow = (): void => {
    // Create the browser window.
    mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
        },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    Menu.setApplicationMenu(mainMenu);
};

function openListWindow() {
    let listWindow = new BrowserWindow({
        width: 400,
        height: 600,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            nodeIntegration: true,
            contextIsolation: false,
        },
    });

    listWindow.loadFile(path.join(__dirname, 'list.html'));

    listWindow.on('closed', () => {
        listWindow = null;
        mainWindow.webContents.send("refresh-items")
    });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
    ipcMain.on('createContract', createContract as any)
    const dataPath = path.join(app.getPath('userData'), 'items.json');
    console.log(dataPath)

    ipcMain.on('load-items', (event) => {
        fs.readFile(dataPath,"utf8", (err, data) => {
            if (err) {
                event.reply('load-items-reply', []); // Send empty array if file doesn't exist
            } else {
                event.reply('load-items-reply', JSON.parse(data));
            }
        });
    });

    ipcMain.on('save-items', (event, items) => {
        fs.writeFile(dataPath, JSON.stringify(items), (err) => {
            if (err) throw err;
            console.log('Items saved.');
        });
    });
    createWindow()
});

async function createContract(event: any, contract: Contract) {
    const dialogResult = await dialog.showOpenDialog({properties: ['openDirectory']})

    if (dialogResult.canceled === false) {
        await generateContract(contract, dialogResult.filePaths[0])
    }
}

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
        mainWindow = null;
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
