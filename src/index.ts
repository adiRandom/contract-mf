import {app, BrowserWindow, dialog, ipcMain, Menu} from 'electron';
import {generateContract} from "./lib/docService";
import {Contract, CrawlResult} from "./model/contract";
import * as fs from "fs";
import * as path from "path";
import puppeteer, {Page} from "puppeteer";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


const MF_URL = "https://mfinante.gov.ro/apps/agenticod.html?pagina=domenii"

let mainWindow: BrowserWindow | null = null;
let capthcaWindow: BrowserWindow | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}


const mainMenu = Menu.buildFromTemplate([
    {
        label: 'File',
        submenu: [
            {
                label: 'Case de marcat',
                click() {
                    openListWindow();
                }
            },
            {type: 'separator'},
            {
                label: 'Iesire',
                click() {
                    app.quit();
                }
            }
        ]
    },
    {
        label: "Edit",
        submenu: [
            { label: "Undo", accelerator: "CmdOrCtrl+Z", role: "undo" },
            { label: "Redo", accelerator: "Shift+CmdOrCtrl+Z", role: "redo" },
            { type: "separator" },
            { label: "Cut", accelerator: "CmdOrCtrl+X", role: "cut" },
            { label: "Copy", accelerator: "CmdOrCtrl+C", role: "copy" },
            { label: "Paste", accelerator: "CmdOrCtrl+V", role: "paste" },
            { label: "Select All", accelerator: "CmdOrCtrl+A", role: "selectAll" }
        ]}
    // Add other menu items as needed
]);

const createWindow = (): void => {
    // Create the browser window.
    mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
        },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    mainWindow.webContents.openDevTools()

    Menu.setApplicationMenu(mainMenu);
};

function openListWindow() {
    let listWindow = new BrowserWindow({
        width: 400,
        height: 600,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            nodeIntegration: true,
            contextIsolation: false,
        },
    });

    listWindow.loadFile(path.join(__dirname, 'list.html'));

    listWindow.on('closed', () => {
        listWindow = null;
        mainWindow.webContents.send("refresh-items")
    });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
    ipcMain.on('createContract', createContract as any)
    const dataPath = path.join(app.getPath('userData'), 'items.json');
    console.log(dataPath)

    ipcMain.on('load-items', (event) => {
        fs.readFile(dataPath, "utf8", (err, data) => {
            if (err) {
                event.reply('load-items-reply', []); // Send empty array if file doesn't exist
            } else {
                event.reply('load-items-reply', JSON.parse(data));
            }
        });
    });

    ipcMain.on('save-items', (event, items) => {
        fs.writeFile(dataPath, JSON.stringify(items), (err) => {
            if (err) throw err;
            console.log('Items saved.');
        });
    });

    ipcMain.on('crawl', (event, code) => {
        crawlMf(code)
    })

    createWindow()
});

async function createContract(event: any, contract: Contract) {
    const dialogResult = await dialog.showOpenDialog({properties: ['openDirectory']})

    if (dialogResult.canceled === false) {
        await generateContract(contract, dialogResult.filePaths[0])
    }
}

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
        mainWindow = null;
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});


async function crawlMf(code: string) {
    const browser = await puppeteer.launch({headless: true});
    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3419.0 Safari/537.36');

    await page.goto(MF_URL, {waitUntil: 'networkidle2'});

    // fill in the form
    const inputField = await page.$('input[name="cod"]');
    await inputField.type(code);

    // Check for captcha by searching for a specific image id within the iframe
    const capthca = await page.$('p img'); // Adjust #captchaId accordingly

    if (capthca) {
        // Captcha exists, handle the captcha challenge
        // For example, get the image's base64 representation
        const captchaBase64 = await capthca.screenshot(
            {type: "png", encoding: "base64"});
        console.log(captchaBase64)

        // Send captcha base64 to renderer for user to solve
        // This part depends on how you implement the IPC to send data to the renderer and receive the input
        const captchaSolution = await new Promise<string>((resolve) => {
            openWindowForCapthcaSolver();
            capthcaWindow.webContents.send("captcha", captchaBase64);
            ipcMain.on('submit-captcha', (event, captcha) => {
                resolve(captcha)
            })
        });

        // Input the captcha solution in the page and navigate/interact as necessary
        await page.type('input[name="captcha"]', captchaSolution); // Adjust selector
    }

    await page.click('input[name="B1"]'); // Adjust selector

    const crawlResult = await crawlData(code, page);
    mainWindow?.webContents.send("crawl-result", crawlResult);

    await browser.close();
    capthcaWindow?.close();
    // return results;
}


async function crawlData(code: string, page: Page): Promise<CrawlResult> {
    const companyName = await page.$eval('.row:nth-of-type(1) div:nth-of-type(2)', (el) => el.innerHTML);
    const companyIncompleteAddress = await page.$eval('.row:nth-of-type(2) div:nth-of-type(2)', (el) => el.innerHTML);
    const companyCity = await page.$eval('.row:nth-of-type(3) div:nth-of-type(2)', (el) => el.innerHTML);
    const companyAddress = companyIncompleteAddress + " " + companyCity;
    const companyJ = await page.$eval('.row:nth-of-type(4) div:nth-of-type(2)', (el) => el.innerHTML);

    return {
        company_name: sanitize(companyName),
        company_address: sanitize(companyAddress),
        company_j: sanitize(companyJ),
        company_code: code
    } as CrawlResult
}

function sanitize(str: string) {
    return str.replace(/[\n\r\t]/g, '')
        .replace(/&nbsp;/g, ' ')
        .replace(/ +/g, ' ')
        .trim()
}

function openWindowForCapthcaSolver() {
    capthcaWindow = new BrowserWindow({
        width: 400,
        height: 600,
        webPreferences: {
            devTools: true,
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    capthcaWindow.loadFile(path.join(__dirname, 'captcha.html'));

    capthcaWindow.on('closed', () => {
        capthcaWindow = null;
    });
}


// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
